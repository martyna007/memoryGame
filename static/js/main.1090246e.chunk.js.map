{"version":3,"sources":["components/Header.js","components/Subheader.js","components/Card.js","components/GameOverModal.js","components/GameContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Subheader","moves","time","Card","props","card","cardInfo","isOpen","onClick","solved","clicked","id","style","backgroundImage","img","name","GameOverModal","GameContainer","useState","cards","setCards","cardsOpen","cardOpensNumber","addMove","count","setCount","isRunning","setIsRunning","win","setWin","gameOver","setGameOver","handleClick","clickedCard","find","currentOpenCards","card1","card2","cardId","newCards","tempWin","forEach","checkWin","checkMatch","allCardsDown","useInterval","useEffect","list","completeList","concat","JSON","parse","stringify","Math","floor","random","sort","prepareCards","plantList","map","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1090246e.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n    return (\n        <div className=\"header\">\n            <h2>Memory Game</h2>\n            <h1>PLANTS</h1>\n            {/* <img style={{ backgroundImage: `url(./images/detail.png)` }}></img> */}\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nfunction Subheader({ moves, time }) {\n    return (\n        <div className=\"subheader\">\n            <h4>Time: {time}</h4>\n            <h4>Moves: {moves}</h4>\n        </div>\n    )\n}\n\nexport default Subheader;","import React from 'react';\n\nfunction Card(props) {\n    const card = props.cardInfo\n    return (\n        <div className={\"card-container \" + (card.isOpen ? \"open\" : \" \")} onClick={card.solved || card.isOpen ? null : () => props.clicked(card.id)}>\n            <div className=\"flipper\">\n                <div className=\"front\" style={{ backgroundImage: `url(./images/bg.jpg)` }}>\n\n                </div>\n                <div className=\"back\" style={{ backgroundImage: `url(${card.img})` }}>\n                    <div className={\"name\" + (card.solved ? \" show\" : \" \")}>{card.name}</div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\n\nfunction GameOverModal({onClick, time, moves}) {\n\n    return (\n        <div className=\"game-over\">\n            <h1>Congratulations!</h1>\n            <h3>You win this game in {time} seconds, and with {moves} moves!</h3>\n            <div className=\"btn\" onClick={onClick}>Restart</div>\n        </div>\n    )\n}\n\nexport default GameOverModal;","import React, { useState, useEffect } from 'react';\nimport { useInterval } from \"@react-corekit/use-interval\";\n\nimport Header from './Header'\nimport Subheader from './Subheader'\nimport Card from './Card'\nimport GameOverModal from './GameOverModal'\n\nimport plantList from '../data/plants.json'\n//TODO: add choose your background and choose category\n\nfunction GameContainer() {\n  const [cards, setCards] = useState([]);\n  const [cardsOpen, cardOpensNumber] = useState(0);\n  const [moves, addMove] = useState(0);\n  const [count, setCount] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [win, setWin] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n\n  useInterval(\n    () => {\n      setCount(count + 1);\n    },\n    isRunning ? 1000 : null\n  );\n\n  useEffect(() => {\n    setCards(prepareCards(plantList))\n    addMove(0)\n    setCount(0);\n    setWin(false)\n    setGameOver(false)\n  }, [gameOver])\n\n\n  function prepareCards(list) {\n    let completeList = [...list];\n\n    completeList = completeList.concat([...list])\n    completeList = JSON.parse(JSON.stringify(completeList));\n\n    completeList.forEach(function (card) {\n      card.id = Math.floor((Math.random() * 1000) + 1)\n    });\n    completeList.sort(() => Math.random() - 0.5);\n\n    return completeList;\n  }\n\n  function handleClick(id) {\n    let newCards = cards;\n    let clickedCard = newCards.find((card) => { return card.id === id; });\n    let currentOpenCards = cardsOpen;\n\n    if (currentOpenCards === 0) {\n      cardOpensNumber(1);\n      setIsRunning(true);\n    } else if (currentOpenCards === 1) {\n      addMove(moves + 1);\n      cardOpensNumber(2)\n      checkMatch(clickedCard, cards.find((card) => { return (card.isOpen && !card.solved) }));\n    } else if (currentOpenCards === 2) {\n      cardOpensNumber(1)\n      allCardsDown();\n    }\n    clickedCard.isOpen = true;\n  }\n\n  function checkMatch(card1, card2) {\n    if (card1.cardId === card2.cardId && card1.id !== card2.id) {\n      card1.isOpen = true;\n      let newCards = cards;\n      newCards.find((card) => { return card.id === card1.id }).solved = true;\n      newCards.find((card) => { return card.id === card2.id }).solved = true;\n\n      cardOpensNumber(0)\n      setCards(newCards)\n\n      checkWin();\n    }\n  }\n\n  function allCardsDown() {\n    let newCards = cards;\n\n    newCards.forEach((card) => {\n      card.isOpen = false;\n      if (card.solved) card.isOpen = true;\n    });\n    setCards(newCards);\n  }\n\n  function checkWin() {\n    let tempWin = true;\n    cards.forEach((card) => {\n      if (!card.solved) {\n        tempWin = false;\n        return;\n      }\n    });\n    if (tempWin) {\n      setIsRunning(false);\n      setWin(true);\n    }\n  }\n\n  function restartGame() {\n    setGameOver(true);\n  }\n\n  return (\n    <>\n      <Header />\n      <Subheader moves={moves} time={count}/>\n      <div className={\"game-container \" + (win ? \"block-view\" : \" \")}>\n        {cards.map((card, index) => (\n          <Card key={index} cardInfo={card} clicked={handleClick} />\n        ))}\n      </div>\n      {win ? <GameOverModal onClick={restartGame} time={count} moves={moves}/> : null}\n    </>\n  )\n}\n\nexport default GameContainer;","import React from 'react';\nimport GameContainer from './components/GameContainer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <GameContainer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}